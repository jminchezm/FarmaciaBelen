
@model FarmaciaBelen.Models.ViewModel.PedidoViewModel

@{
    ViewBag.Title = "Editar Pedido";
    Layout = null;
    bool bloquearCampos = Model.ESTADO_PEDIDO == "Confirmado";

}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Editar Pedido</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="~/Content/css/Pedido/style.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-4">
        <div class="card shadow">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Editar Pedido</h4>
            </div>
            <div class="card-body">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()

                    <div class="row mb-2">
                        <div class="col-md-6">
                            <b>@Html.LabelFor(model => model.PEDIDO_ID, new { @class = "form-label" })</b>
                            @Html.TextBoxFor(model => model.PEDIDO_ID, new { @class = "form-control", @readonly = "readonly" })
                        </div>
                        <div class="col-md-6">
                            <b>@Html.LabelFor(model => model.ESTADO_PEDIDO, new { @class = "form-label" })</b>
                            @*@Html.TextBoxFor(model => model.ESTADO_PEDIDO, new { @class = "form-control", @readonly = "readonly" })*@
                            @if (Model.ESTADO_PEDIDO == "Confirmado")
                            {
                                <input type="text" class="form-control" value="@Model.ESTADO_PEDIDO" readonly />
                                @Html.HiddenFor(model => model.ESTADO_PEDIDO)
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.ESTADO_PEDIDO,
                                    new SelectList(
                                        new List<SelectListItem>
                                        {
                                            //new SelectListItem { Text = "Creado", Value = "Creado" },
                                            new SelectListItem { Text = "Pendiente", Value = "Pendiente" }
                                            //new SelectListItem { Text = "Confirmado", Value = "Confirmado" }
                                        },
                                        "Value",
                                        "Text",
                                        Model.ESTADO_PEDIDO // Selecciona el valor actual
                                    ),
                                    htmlAttributes: new { @class = "form-select" })
                            }

                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-md-6">
                            <label class="form-label"><b>Proveedor</b></label>
                            @*@Html.DropDownListFor(m => m.PROVEEDOR_ID, ViewBag.Proveedores as SelectList, "Seleccione", new { @class = "form-select" })*@
                            @if (bloquearCampos)
                            {
                                <!-- Mostramos el nombre del proveedor como texto de solo lectura -->
                                <input type="text" class="form-control" value="@Model.PROVEEDOR_NOMBRE" readonly />

                                <!-- Pero enviamos el ID oculto al servidor -->
                                @Html.HiddenFor(m => m.PROVEEDOR_ID)
                            }
                            else
                            {
                                @Html.DropDownListFor(m => m.PROVEEDOR_ID, ViewBag.Proveedores as SelectList, "Seleccione", new { @class = "form-select" })
                            }
                            @Html.ValidationMessageFor(m => m.PROVEEDOR_ID, null, new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            <label class="form-label"><b>Fecha estimada de entrega*</b></label>
                            @*@Html.TextBoxFor(m => m.FECHA_ENTREGA_ESTIMADA, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })*@
                            @if (bloquearCampos)
                            {
                                @Html.TextBoxFor(m => m.FECHA_ENTREGA_ESTIMADA, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date", @readonly = "readonly" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => m.FECHA_ENTREGA_ESTIMADA, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                            }
                            @Html.ValidationMessageFor(m => m.FECHA_ENTREGA_ESTIMADA, null, new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="mb-2">
                        <label class="form-label"><b>Observaciones</b></label>
                        @*@Html.TextAreaFor(m => m.OBSERVACIONES, new { @class = "form-control", rows = 1 })*@
                        @if (bloquearCampos)
                        {
                            @Html.TextAreaFor(m => m.OBSERVACIONES, new { @class = "form-control", rows = 1, @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.TextAreaFor(m => m.OBSERVACIONES, new { @class = "form-control", rows = 1 })
                        }
                    </div>

                    <h5 class="mt-3"><b>Detalle de Pedido</b></h5>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="scroll-table-wrapper">
                        <table id="detallesTable" class="table table-bordered">
                            <thead class="table-secondary sticky-top bg-secondary text-white">
                                <tr>
                                    <th>Producto</th>
                                    <th>Referencia</th>
                                    <th>Cantidad</th>
                                    <th>Precio Unitario</th>
                                    @*<th>Sub Total</th>*@
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody>
                                @*<p class="text-muted">Total de filas: @Model.Detalles.Count</p>*@

                                @if (Model.Detalles != null && Model.Detalles.Any())
                                {
                                    for (int i = 0; i < Model.Detalles.Count; i++)
                                    {


                                        <tr>
                                            <td>
                                                @if (bloquearCampos)
                                                {
                                                    <input name="Detalles[@i].PRODUCTO_NOMBRE" value="@Model.Detalles[i].PRODUCTO_NOMBRE" type="text" class="form-control" min="1" readonly />
                                                    @Html.HiddenFor(m => m.Detalles[i].PRODUCTO_ID)
                                                    @Html.HiddenFor(m => m.Detalles[i].PRODUCTO_NOMBRE)
                                                }
                                                else
                                                {
                                                    <select name="Detalles[@i].PRODUCTO_ID" class="form-select producto-select" onchange="mostrarImagen(this, @i)">
                                                        <option value="">Seleccione un producto</option>
                                                        @foreach (var producto in (List<FarmaciaBelen.Models.ViewModel.ProductoViewModel>)ViewBag.Productos)
                                                        {
                                                            <option value="@producto.PRODUCTO_ID" data-img="@producto.IMAGEN_URL" @(producto.PRODUCTO_ID == Model.Detalles[i].PRODUCTO_ID ? "selected" : "")>
                                                                @producto.PRODUCTO_NOMBRE
                                                            </option>
                                                        }
                                                    </select>
                                                }
                                            </td>
                                            <td>
                                                @*<div id="img-preview-@i"  class="mt-2"></div>*@
                                                @if (bloquearCampos)
                                                {
                                                    <img alt="Imagen del producto" style="max-width:100px;" class="img-thumbnail" src="@Model.Detalles[i].PRODUCTO_IMG" />
                                                }
                                                else
                                                {
                                                    <div id="img-preview-@i" class="mt-2"></div>
                                                }
                                            </td>
                                            <td>
                                                @*<input name="Detalles[@i].DETALLEPEDIDO_CANTIDAD" value="@Model.Detalles[i].DETALLEPEDIDO_CANTIDAD" type="number" class="form-control" min="1" required />*@
                                                @if (bloquearCampos)
                                                {
                                                    <input name="Detalles[@i].DETALLEPEDIDO_CANTIDAD" value="@Model.Detalles[i].DETALLEPEDIDO_CANTIDAD" type="number" class="form-control" min="1" readonly required />
                                                }
                                                else
                                                {
                                                    <input name="Detalles[@i].DETALLEPEDIDO_CANTIDAD" value="@Model.Detalles[i].DETALLEPEDIDO_CANTIDAD" type="number" class="form-control" min="1" required />
                                                }
                                            </td>
                                            <td>
                                                @*<input name="Detalles[@i].PRECIO_UNITARIO" value="@Model.Detalles[i].PRECIO_UNITARIO" type="number" class="form-control" min="0" required />*@
                                                @if (bloquearCampos)
                                                {
                                                    <input name="Detalles[@i].PRECIO_UNITARIO" value="@Model.Detalles[i].PRECIO_UNITARIO" type="number" class="form-control" min="0" readonly required />
                                                }
                                                else
                                                {
                                                    <input name="Detalles[@i].PRECIO_UNITARIO" value="@Model.Detalles[i].PRECIO_UNITARIO" type="number" class="form-control" min="0" required />
                                                }
                                            </td>
                                            <td>
                                                @*<button type="button" class="btn btn-danger" onclick="eliminarFila(this)">Eliminar</button>*@
                                                @if (bloquearCampos)
                                                {
                                                    <button type="button" class="btn btn-danger" onclick="eliminarFila(this)" disabled="disabled">Eliminar</button>
                                                }
                                                else
                                                {
                                                    <button type="button" class="btn btn-danger" onclick="eliminarFila(this)">Eliminar</button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>

                    <div class="d-flex justify-content-center">
                        @*<button type="button" class="btn btn-outline-primary mb-3 mt-2" onclick="agregarFila()">Agregar Producto</button>*@
                        @if (bloquearCampos)
                        {
                            <button type="button" class="btn btn-outline-primary mb-3 mt-2" onclick="agregarFila()" disabled="disabled">Agregar Producto</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-primary mb-3 mt-2" onclick="agregarFila()">Agregar Producto</button>
                        }
                    </div>

                    <div class="d-flex justify-content-between flex-wrap gap-2">
                        <a href="@Url.Action("Index")" class="btn btn-secondary">← Volver a la lista</a>

                        <div class="d-flex gap-2">
                            @if (Model.ESTADO_PEDIDO != "Confirmado")
                            {
                                <button type="submit" class="btn btn-success">Guardar Pedido</button>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Modal de confirmación -->
    <div class="modal fade" id="modalCreado" tabindex="-1" aria-labelledby="modalCreadoLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title" id="modalCreadoLabel">Pedido Modificado</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    ¡Pedido modificado exitosamente!
                </div>
                <div class="modal-footer">
                    <a href="@Url.Action("Index")" class="btn btn-secondary">Ir al listado</a>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal de error por precios faltantes -->
    <div class="modal fade" id="modalErrorPrecios" tabindex="-1" aria-labelledby="modalErrorPreciosLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-danger">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="modalErrorPreciosLabel">Error de validación</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                </div>
                <div class="modal-body">
                    Para cambiar el estado a <strong>'Pendiente'</strong>, todos los productos deben tener un <strong>precio unitario mayor a 0</strong>.
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Aceptar</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    @if (ViewBag.Editado != null && (bool)ViewBag.Editado)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var modal = new bootstrap.Modal(document.getElementById('modalCreado'));
                modal.show();
            });
        </script>
    }

    <script>
        function validarFormulario() {
            const estado = document.querySelector('[name="ESTADO_PEDIDO"]').value;
            if (estado === "Pendiente") {
                const precios = document.querySelectorAll("input[name$='PRECIO_UNITARIO']");
                for (let precio of precios) {
                    if (parseFloat(precio.value) <= 0 || isNaN(parseFloat(precio.value))) {
                        const modal = new bootstrap.Modal(document.getElementById("modalErrorPrecios"));
                        modal.show();
                        return false;
                    }
                }
            }
            return true;
        }
    </script>

    <script>
        let index = @(Model.Detalles != null ? Model.Detalles.Count : 0);
        const productos = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Productos));

        function agregarFila() {
            let opciones = '';
            productos.forEach(p => {
                opciones += `<option value="${p.PRODUCTO_ID}" data-img="${p.IMAGEN_URL}">${p.PRODUCTO_NOMBRE}</option>`;
            });

            const row = `
                <tr>
                    <td>
                        <select name="Detalles[${index}].PRODUCTO_ID" class="form-select producto-select" onchange="mostrarImagen(this, ${index})">
                            <option value="">Seleccione un producto</option>
                            ${opciones}
                        </select>
                    </td>
                    <td><div id="img-preview-${index}" class="mt-2"></div></td>
                    <td><input name="Detalles[${index}].DETALLEPEDIDO_CANTIDAD" type="number" class="form-control" min="1" required /></td>
                    <td><input name="Detalles[${index}].PRECIO_UNITARIO" type="number" class="form-control" min="0"/></td>
                    <td><button type="button" class="btn btn-danger" onclick="eliminarFila(this)">Eliminar</button></td>
                </tr>`;
            document.querySelector("#detallesTable tbody").insertAdjacentHTML('beforeend', row);
            index++;
        }

        function mostrarImagen(select, index) {
            const selectedOption = select.options[select.selectedIndex];
            const imgUrl = selectedOption.getAttribute("data-img");
            const preview = document.getElementById(`img-preview-${index}`);
            if (imgUrl) {
                preview.innerHTML = `<img src="${imgUrl}" alt="Imagen del producto" style="max-width:100px;" class="img-thumbnail" />`;
            } else {
                preview.innerHTML = '';
            }
        }

        function eliminarFila(btn) {
            btn.closest('tr').remove();
            reindexarFilas();
        }

        /*Reindexar filas*/

        function reindexarFilas() {
            const filas = document.querySelectorAll("#detallesTable tbody tr");
            index = 0;

            filas.forEach((fila, i) => {
                fila.querySelectorAll("select, input").forEach(el => {
                    if (el.name.includes("PRODUCTO_ID")) {
                        el.name = `Detalles[${index}].PRODUCTO_ID`;
                        el.setAttribute("onchange", `mostrarImagen(this, ${index})`);
                    }
                    if (el.name.includes("DETALLEPEDIDO_CANTIDAD")) {
                        el.name = `Detalles[${index}].DETALLEPEDIDO_CANTIDAD`;
                    }
                    if (el.name.includes("PRECIO_UNITARIO")) {
                        el.name = `Detalles[${index}].PRECIO_UNITARIO`;
                    }
                    if (el.id && el.id.includes("img-preview")) {
                        el.id = `img-preview-${index}`;
                    }
                });
                index++;
            });
        }

        document.addEventListener("DOMContentLoaded", function () {
            for (let i = 0; i < index; i++) {
                const select = document.querySelector(`select[name='Detalles[${i}].PRODUCTO_ID']`);
                if (select && select.value) {
                    mostrarImagen(select, i);
                }
            }
        });
    </script>

    @Scripts.Render("~/bundles/jqueryval")
</body>
</html>
